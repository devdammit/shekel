package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/devdammit/shekel/cmd/unit/internal/entities"
	"github.com/devdammit/shekel/pkg/gql"
	"github.com/devdammit/shekel/pkg/pointer"
)

// QRCodes is the resolver for the qrCodes field.
func (r *contactResolver) QRCodes(ctx context.Context, obj *entities.Contact) ([]string, error) {
	var result []string

	for _, qrCode := range obj.QRCodes {
		result = append(result, qrCode.BankName)
	}

	return result, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *contactResolver) DeletedAt(ctx context.Context, obj *entities.Contact) (*gql.DateTime, error) {
	if obj.DeletedAt == nil {
		return nil, nil
	}

	return pointer.Ptr(gql.FromDateTime(*obj.DeletedAt)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *contactResolver) CreatedAt(ctx context.Context, obj *entities.Contact) (gql.DateTime, error) {
	return gql.FromDateTime(obj.CreatedAt), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *contactResolver) UpdatedAt(ctx context.Context, obj *entities.Contact) (gql.DateTime, error) {
	return gql.FromDateTime(obj.UpdatedAt), nil
}

// Contact returns ContactResolver implementation.
func (r *Resolver) Contact() ContactResolver { return &contactResolver{r} }

type contactResolver struct{ *Resolver }
