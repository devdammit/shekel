package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/devdammit/shekel/cmd/unit/internal/entities"
	"github.com/devdammit/shekel/cmd/unit/internal/handlers/graphql/model"
	"github.com/devdammit/shekel/pkg/gql"
	"github.com/devdammit/shekel/pkg/pointer"
)

// Status is the resolver for the status field.
func (r *invoiceResolver) Status(ctx context.Context, obj *entities.Invoice) (model.InvoiceStatus, error) {
	return model.InvoiceStatus(obj.Status), nil
}

// Type is the resolver for the type field.
func (r *invoiceResolver) Type(ctx context.Context, obj *entities.Invoice) (model.InvoiceType, error) {
	return model.InvoiceType(obj.Type), nil
}

// Amount is the resolver for the amount field.
func (r *invoiceResolver) Amount(ctx context.Context, obj *entities.Invoice) (model.Amount, error) {
	return model.Amount{
		Currency: gql.Currency{Code: obj.Amount.CurrencyCode},
		Amount:   obj.Amount.Value,
	}, nil
}

// Date is the resolver for the date field.
func (r *invoiceResolver) Date(ctx context.Context, obj *entities.Invoice) (gql.DateTime, error) {
	return gql.FromDateTime(obj.Date), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *invoiceResolver) CreatedAt(ctx context.Context, obj *entities.Invoice) (gql.DateTime, error) {
	return gql.FromDateTime(obj.CreatedAt), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *invoiceResolver) UpdatedAt(ctx context.Context, obj *entities.Invoice) (gql.DateTime, error) {
	return gql.FromDateTime(obj.UpdateAt), nil
}

// Type is the resolver for the type field.
func (r *invoiceTemplateResolver) Type(ctx context.Context, obj *entities.InvoiceTemplate) (model.InvoiceType, error) {
	return model.InvoiceType(obj.Type), nil
}

// Amount is the resolver for the amount field.
func (r *invoiceTemplateResolver) Amount(ctx context.Context, obj *entities.InvoiceTemplate) (model.Amount, error) {
	return model.Amount{
		Currency: gql.Currency{Code: obj.Amount.CurrencyCode},
		Amount:   obj.Amount.Value,
	}, nil
}

// Contact is the resolver for the contact field.
func (r *invoiceTemplateResolver) Contact(ctx context.Context, obj *entities.InvoiceTemplate) (*entities.Contact, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// Date is the resolver for the date field.
func (r *invoiceTemplateResolver) Date(ctx context.Context, obj *entities.InvoiceTemplate) (gql.DateTime, error) {
	return gql.FromDateTime(obj.Date), nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *invoiceTemplateResolver) DeletedAt(ctx context.Context, obj *entities.InvoiceTemplate) (*gql.DateTime, error) {
	if obj.DeletedAt == nil {
		return nil, nil
	}

	return pointer.Ptr(gql.FromDateTime(*obj.DeletedAt)), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *invoiceTemplateResolver) CreatedAt(ctx context.Context, obj *entities.InvoiceTemplate) (gql.DateTime, error) {
	return gql.FromDateTime(obj.CreatedAt), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *invoiceTemplateResolver) UpdatedAt(ctx context.Context, obj *entities.InvoiceTemplate) (gql.DateTime, error) {
	return gql.FromDateTime(obj.UpdateAt), nil
}

// Interval is the resolver for the interval field.
func (r *repeatPlannerResolver) Interval(ctx context.Context, obj *entities.RepeatPlanner) (model.PlanRepeatInterval, error) {
	return model.PlanRepeatInterval(obj.Interval), nil
}

// DaysOfWeek is the resolver for the daysOfWeek field.
func (r *repeatPlannerResolver) DaysOfWeek(ctx context.Context, obj *entities.RepeatPlanner) ([]uint32, error) {
	var days []uint32

	for _, day := range obj.DaysOfWeek {
		d := uint32(day)
		days = append(days, d)
	}

	return days, nil
}

// EndDate is the resolver for the endDate field.
func (r *repeatPlannerResolver) EndDate(ctx context.Context, obj *entities.RepeatPlanner) (*gql.Date, error) {
	if obj.EndDate == nil {
		return nil, nil
	}

	return pointer.Ptr(gql.FromDate(*obj.EndDate)), nil
}

// Invoice returns InvoiceResolver implementation.
func (r *Resolver) Invoice() InvoiceResolver { return &invoiceResolver{r} }

// InvoiceTemplate returns InvoiceTemplateResolver implementation.
func (r *Resolver) InvoiceTemplate() InvoiceTemplateResolver { return &invoiceTemplateResolver{r} }

// RepeatPlanner returns RepeatPlannerResolver implementation.
func (r *Resolver) RepeatPlanner() RepeatPlannerResolver { return &repeatPlannerResolver{r} }

type invoiceResolver struct{ *Resolver }
type invoiceTemplateResolver struct{ *Resolver }
type repeatPlannerResolver struct{ *Resolver }
