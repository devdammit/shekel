// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/bbolt/periods.go
//
// Generated by this command:
//
//	mockgen -source=internal/repositories/bbolt/periods.go -destination=internal/mocks/repositories/bbolt/periods.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	datetime "github.com/devdammit/shekel/pkg/types/datetime"
	gomock "go.uber.org/mock/gomock"
)

// MockAppConfigService is a mock of AppConfigService interface.
type MockAppConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigServiceMockRecorder
}

// MockAppConfigServiceMockRecorder is the mock recorder for MockAppConfigService.
type MockAppConfigServiceMockRecorder struct {
	mock *MockAppConfigService
}

// NewMockAppConfigService creates a new mock instance.
func NewMockAppConfigService(ctrl *gomock.Controller) *MockAppConfigService {
	mock := &MockAppConfigService{ctrl: ctrl}
	mock.recorder = &MockAppConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConfigService) EXPECT() *MockAppConfigServiceMockRecorder {
	return m.recorder
}

// GetStartYear mocks base method.
func (m *MockAppConfigService) GetStartYear() (datetime.DateTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartYear")
	ret0, _ := ret[0].(datetime.DateTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartYear indicates an expected call of GetStartYear.
func (mr *MockAppConfigServiceMockRecorder) GetStartYear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartYear", reflect.TypeOf((*MockAppConfigService)(nil).GetStartYear))
}

// MockDateTimeProvider is a mock of DateTimeProvider interface.
type MockDateTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDateTimeProviderMockRecorder
}

// MockDateTimeProviderMockRecorder is the mock recorder for MockDateTimeProvider.
type MockDateTimeProviderMockRecorder struct {
	mock *MockDateTimeProvider
}

// NewMockDateTimeProvider creates a new mock instance.
func NewMockDateTimeProvider(ctrl *gomock.Controller) *MockDateTimeProvider {
	mock := &MockDateTimeProvider{ctrl: ctrl}
	mock.recorder = &MockDateTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDateTimeProvider) EXPECT() *MockDateTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockDateTimeProvider) Now() datetime.DateTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(datetime.DateTime)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockDateTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockDateTimeProvider)(nil).Now))
}
