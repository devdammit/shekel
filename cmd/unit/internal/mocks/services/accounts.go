// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/accounts/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/accounts/service.go -destination=internal/mocks/services/accounts.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	currency "github.com/devdammit/shekel/pkg/currency"
	datetime "github.com/devdammit/shekel/pkg/types/datetime"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// MockCurrencyRates is a mock of CurrencyRates interface.
type MockCurrencyRates struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRatesMockRecorder
}

// MockCurrencyRatesMockRecorder is the mock recorder for MockCurrencyRates.
type MockCurrencyRatesMockRecorder struct {
	mock *MockCurrencyRates
}

// NewMockCurrencyRates creates a new mock instance.
func NewMockCurrencyRates(ctrl *gomock.Controller) *MockCurrencyRates {
	mock := &MockCurrencyRates{ctrl: ctrl}
	mock.recorder = &MockCurrencyRatesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRates) EXPECT() *MockCurrencyRatesMockRecorder {
	return m.recorder
}

// Convert mocks base method.
func (m *MockCurrencyRates) Convert(amount currency.Amount, to currency.Code, date datetime.DateTime) (*currency.Amount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Convert", amount, to, date)
	ret0, _ := ret[0].(*currency.Amount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert.
func (mr *MockCurrencyRatesMockRecorder) Convert(amount, to, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockCurrencyRates)(nil).Convert), amount, to, date)
}
