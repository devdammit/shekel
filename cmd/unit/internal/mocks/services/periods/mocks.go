// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/periods/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/periods/service.go -destination=internal/mocks/services/periods/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	datetime "github.com/devdammit/shekel/pkg/types/datetime"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, period entities.Period) (*entities.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, period)
	ret0, _ := ret[0].(*entities.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, period)
}

// GetCount mocks base method.
func (m *MockRepository) GetCount(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockRepositoryMockRecorder) GetCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockRepository)(nil).GetCount), ctx)
}

// MockAppConfig is a mock of AppConfig interface.
type MockAppConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigMockRecorder
}

// MockAppConfigMockRecorder is the mock recorder for MockAppConfig.
type MockAppConfigMockRecorder struct {
	mock *MockAppConfig
}

// NewMockAppConfig creates a new mock instance.
func NewMockAppConfig(ctrl *gomock.Controller) *MockAppConfig {
	mock := &MockAppConfig{ctrl: ctrl}
	mock.recorder = &MockAppConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConfig) EXPECT() *MockAppConfigMockRecorder {
	return m.recorder
}

// GetStartYear mocks base method.
func (m *MockAppConfig) GetStartYear() (datetime.DateTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartYear")
	ret0, _ := ret[0].(datetime.DateTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartYear indicates an expected call of GetStartYear.
func (mr *MockAppConfigMockRecorder) GetStartYear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartYear", reflect.TypeOf((*MockAppConfig)(nil).GetStartYear))
}

// MockDateTimeProvider is a mock of DateTimeProvider interface.
type MockDateTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDateTimeProviderMockRecorder
}

// MockDateTimeProviderMockRecorder is the mock recorder for MockDateTimeProvider.
type MockDateTimeProviderMockRecorder struct {
	mock *MockDateTimeProvider
}

// NewMockDateTimeProvider creates a new mock instance.
func NewMockDateTimeProvider(ctrl *gomock.Controller) *MockDateTimeProvider {
	mock := &MockDateTimeProvider{ctrl: ctrl}
	mock.recorder = &MockDateTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDateTimeProvider) EXPECT() *MockDateTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockDateTimeProvider) Now() datetime.DateTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(datetime.DateTime)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockDateTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockDateTimeProvider)(nil).Now))
}
