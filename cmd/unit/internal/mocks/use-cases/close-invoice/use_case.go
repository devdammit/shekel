// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/close-invoice/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/close-invoice/use_case.go -destination=internal/mocks/use-cases/close-invoice/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockinvoicesRepository is a mock of invoicesRepository interface.
type MockinvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockinvoicesRepositoryMockRecorder
}

// MockinvoicesRepositoryMockRecorder is the mock recorder for MockinvoicesRepository.
type MockinvoicesRepositoryMockRecorder struct {
	mock *MockinvoicesRepository
}

// NewMockinvoicesRepository creates a new mock instance.
func NewMockinvoicesRepository(ctrl *gomock.Controller) *MockinvoicesRepository {
	mock := &MockinvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockinvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinvoicesRepository) EXPECT() *MockinvoicesRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockinvoicesRepository) GetByID(ctx context.Context, id uint64) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockinvoicesRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockinvoicesRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockinvoicesRepository) Update(ctx context.Context, invoice *entities.Invoice) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, invoice)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockinvoicesRepositoryMockRecorder) Update(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockinvoicesRepository)(nil).Update), ctx, invoice)
}

// MockperiodsRepository is a mock of periodsRepository interface.
type MockperiodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockperiodsRepositoryMockRecorder
}

// MockperiodsRepositoryMockRecorder is the mock recorder for MockperiodsRepository.
type MockperiodsRepositoryMockRecorder struct {
	mock *MockperiodsRepository
}

// NewMockperiodsRepository creates a new mock instance.
func NewMockperiodsRepository(ctrl *gomock.Controller) *MockperiodsRepository {
	mock := &MockperiodsRepository{ctrl: ctrl}
	mock.recorder = &MockperiodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockperiodsRepository) EXPECT() *MockperiodsRepositoryMockRecorder {
	return m.recorder
}

// GetLast mocks base method.
func (m *MockperiodsRepository) GetLast(ctx context.Context) (*entities.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast", ctx)
	ret0, _ := ret[0].(*entities.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockperiodsRepositoryMockRecorder) GetLast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockperiodsRepository)(nil).GetLast), ctx)
}
