// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/create-invoice/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/create-invoice/use_case.go -destination=internal/mocks/use-cases/create-invoice/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoicesService is a mock of InvoicesService interface.
type MockInvoicesService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesServiceMockRecorder
}

// MockInvoicesServiceMockRecorder is the mock recorder for MockInvoicesService.
type MockInvoicesServiceMockRecorder struct {
	mock *MockInvoicesService
}

// NewMockInvoicesService creates a new mock instance.
func NewMockInvoicesService(ctrl *gomock.Controller) *MockInvoicesService {
	mock := &MockInvoicesService{ctrl: ctrl}
	mock.recorder = &MockInvoicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesService) EXPECT() *MockInvoicesServiceMockRecorder {
	return m.recorder
}

// GetScheduledInvoices mocks base method.
func (m *MockInvoicesService) GetScheduledInvoices(ctx context.Context, template entities.InvoiceTemplate) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInvoices", ctx, template)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInvoices indicates an expected call of GetScheduledInvoices.
func (mr *MockInvoicesServiceMockRecorder) GetScheduledInvoices(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInvoices", reflect.TypeOf((*MockInvoicesService)(nil).GetScheduledInvoices), ctx, template)
}

// MockInvoicesRepository is a mock of InvoicesRepository interface.
type MockInvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesRepositoryMockRecorder
}

// MockInvoicesRepositoryMockRecorder is the mock recorder for MockInvoicesRepository.
type MockInvoicesRepositoryMockRecorder struct {
	mock *MockInvoicesRepository
}

// NewMockInvoicesRepository creates a new mock instance.
func NewMockInvoicesRepository(ctrl *gomock.Controller) *MockInvoicesRepository {
	mock := &MockInvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesRepository) EXPECT() *MockInvoicesRepositoryMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockInvoicesRepository) BulkCreate(ctx context.Context, invoices []entities.Invoice) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", ctx, invoices)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockInvoicesRepositoryMockRecorder) BulkCreate(ctx, invoices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockInvoicesRepository)(nil).BulkCreate), ctx, invoices)
}

// CreateTemplate mocks base method.
func (m *MockInvoicesRepository) CreateTemplate(ctx context.Context, template entities.InvoiceTemplate) (*entities.InvoiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplate", ctx, template)
	ret0, _ := ret[0].(*entities.InvoiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemplate indicates an expected call of CreateTemplate.
func (mr *MockInvoicesRepositoryMockRecorder) CreateTemplate(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplate", reflect.TypeOf((*MockInvoicesRepository)(nil).CreateTemplate), ctx, template)
}

// MockPeriodsRepository is a mock of PeriodsRepository interface.
type MockPeriodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodsRepositoryMockRecorder
}

// MockPeriodsRepositoryMockRecorder is the mock recorder for MockPeriodsRepository.
type MockPeriodsRepositoryMockRecorder struct {
	mock *MockPeriodsRepository
}

// NewMockPeriodsRepository creates a new mock instance.
func NewMockPeriodsRepository(ctrl *gomock.Controller) *MockPeriodsRepository {
	mock := &MockPeriodsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodsRepository) EXPECT() *MockPeriodsRepositoryMockRecorder {
	return m.recorder
}

// GetLast mocks base method.
func (m *MockPeriodsRepository) GetLast(ctx context.Context) (*entities.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast", ctx)
	ret0, _ := ret[0].(*entities.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockPeriodsRepositoryMockRecorder) GetLast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockPeriodsRepository)(nil).GetLast), ctx)
}
