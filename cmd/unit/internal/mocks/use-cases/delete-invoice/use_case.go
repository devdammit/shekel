// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/delete-invoice/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/delete-invoice/use_case.go -destination=internal/mocks/use-cases/delete-invoice/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoicesRepository is a mock of InvoicesRepository interface.
type MockInvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesRepositoryMockRecorder
}

// MockInvoicesRepositoryMockRecorder is the mock recorder for MockInvoicesRepository.
type MockInvoicesRepositoryMockRecorder struct {
	mock *MockInvoicesRepository
}

// NewMockInvoicesRepository creates a new mock instance.
func NewMockInvoicesRepository(ctrl *gomock.Controller) *MockInvoicesRepository {
	mock := &MockInvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesRepository) EXPECT() *MockInvoicesRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInvoicesRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInvoicesRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvoicesRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockInvoicesRepository) GetByID(ctx context.Context, id uint64) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByID), ctx, id)
}

// GetByTemplateID mocks base method.
func (m *MockInvoicesRepository) GetByTemplateID(ctx context.Context, templateID uint64) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTemplateID", ctx, templateID)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTemplateID indicates an expected call of GetByTemplateID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByTemplateID(ctx, templateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTemplateID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByTemplateID), ctx, templateID)
}

// MockInvoicesTemplatesRepository is a mock of InvoicesTemplatesRepository interface.
type MockInvoicesTemplatesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesTemplatesRepositoryMockRecorder
}

// MockInvoicesTemplatesRepositoryMockRecorder is the mock recorder for MockInvoicesTemplatesRepository.
type MockInvoicesTemplatesRepositoryMockRecorder struct {
	mock *MockInvoicesTemplatesRepository
}

// NewMockInvoicesTemplatesRepository creates a new mock instance.
func NewMockInvoicesTemplatesRepository(ctrl *gomock.Controller) *MockInvoicesTemplatesRepository {
	mock := &MockInvoicesTemplatesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesTemplatesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesTemplatesRepository) EXPECT() *MockInvoicesTemplatesRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInvoicesTemplatesRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInvoicesTemplatesRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvoicesTemplatesRepository)(nil).Delete), ctx, id)
}
