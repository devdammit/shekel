// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/initialize/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/initialize/use_case.go -destination=internal/mocks/use-cases/initialize/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	datetime "github.com/devdammit/shekel/pkg/types/datetime"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodsRepository is a mock of PeriodsRepository interface.
type MockPeriodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodsRepositoryMockRecorder
}

// MockPeriodsRepositoryMockRecorder is the mock recorder for MockPeriodsRepository.
type MockPeriodsRepositoryMockRecorder struct {
	mock *MockPeriodsRepository
}

// NewMockPeriodsRepository creates a new mock instance.
func NewMockPeriodsRepository(ctrl *gomock.Controller) *MockPeriodsRepository {
	mock := &MockPeriodsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodsRepository) EXPECT() *MockPeriodsRepositoryMockRecorder {
	return m.recorder
}

// GetCount mocks base method.
func (m *MockPeriodsRepository) GetCount(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockPeriodsRepositoryMockRecorder) GetCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockPeriodsRepository)(nil).GetCount), ctx)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockUnitOfWork) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUnitOfWorkMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUnitOfWork)(nil).Commit), ctx)
}

// CreatePeriod mocks base method.
func (m *MockUnitOfWork) CreatePeriod(period entities.Period) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeriod", period)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePeriod indicates an expected call of CreatePeriod.
func (mr *MockUnitOfWorkMockRecorder) CreatePeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeriod", reflect.TypeOf((*MockUnitOfWork)(nil).CreatePeriod), period)
}

// SetStartDate mocks base method.
func (m *MockUnitOfWork) SetStartDate(date datetime.Date) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStartDate", date)
}

// SetStartDate indicates an expected call of SetStartDate.
func (mr *MockUnitOfWorkMockRecorder) SetStartDate(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartDate", reflect.TypeOf((*MockUnitOfWork)(nil).SetStartDate), date)
}

// MockDateTimeProvider is a mock of DateTimeProvider interface.
type MockDateTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDateTimeProviderMockRecorder
}

// MockDateTimeProviderMockRecorder is the mock recorder for MockDateTimeProvider.
type MockDateTimeProviderMockRecorder struct {
	mock *MockDateTimeProvider
}

// NewMockDateTimeProvider creates a new mock instance.
func NewMockDateTimeProvider(ctrl *gomock.Controller) *MockDateTimeProvider {
	mock := &MockDateTimeProvider{ctrl: ctrl}
	mock.recorder = &MockDateTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDateTimeProvider) EXPECT() *MockDateTimeProviderMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockDateTimeProvider) Now() datetime.DateTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(datetime.DateTime)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockDateTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockDateTimeProvider)(nil).Now))
}
