// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/update-invoice/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/update-invoice/use_case.go -destination=internal/mocks/use-cases/update-invoice/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodsRepository is a mock of PeriodsRepository interface.
type MockPeriodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodsRepositoryMockRecorder
}

// MockPeriodsRepositoryMockRecorder is the mock recorder for MockPeriodsRepository.
type MockPeriodsRepositoryMockRecorder struct {
	mock *MockPeriodsRepository
}

// NewMockPeriodsRepository creates a new mock instance.
func NewMockPeriodsRepository(ctrl *gomock.Controller) *MockPeriodsRepository {
	mock := &MockPeriodsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodsRepository) EXPECT() *MockPeriodsRepositoryMockRecorder {
	return m.recorder
}

// GetLast mocks base method.
func (m *MockPeriodsRepository) GetLast(ctx context.Context) (*entities.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast", ctx)
	ret0, _ := ret[0].(*entities.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockPeriodsRepositoryMockRecorder) GetLast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockPeriodsRepository)(nil).GetLast), ctx)
}

// MockInvoicesRepository is a mock of InvoicesRepository interface.
type MockInvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesRepositoryMockRecorder
}

// MockInvoicesRepositoryMockRecorder is the mock recorder for MockInvoicesRepository.
type MockInvoicesRepositoryMockRecorder struct {
	mock *MockInvoicesRepository
}

// NewMockInvoicesRepository creates a new mock instance.
func NewMockInvoicesRepository(ctrl *gomock.Controller) *MockInvoicesRepository {
	mock := &MockInvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesRepository) EXPECT() *MockInvoicesRepositoryMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockInvoicesRepository) BulkCreate(ctx context.Context, invoices []entities.Invoice) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", ctx, invoices)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockInvoicesRepositoryMockRecorder) BulkCreate(ctx, invoices any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockInvoicesRepository)(nil).BulkCreate), ctx, invoices)
}

// Delete mocks base method.
func (m *MockInvoicesRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInvoicesRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvoicesRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockInvoicesRepository) GetByID(ctx context.Context, id uint64) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByID), ctx, id)
}

// GetByTemplateID mocks base method.
func (m *MockInvoicesRepository) GetByTemplateID(ctx context.Context, id uint64) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTemplateID", ctx, id)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTemplateID indicates an expected call of GetByTemplateID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByTemplateID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTemplateID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByTemplateID), ctx, id)
}

// Update mocks base method.
func (m *MockInvoicesRepository) Update(ctx context.Context, invoice *entities.Invoice) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, invoice)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInvoicesRepositoryMockRecorder) Update(ctx, invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInvoicesRepository)(nil).Update), ctx, invoice)
}

// MockInvoicesTemplateRepository is a mock of InvoicesTemplateRepository interface.
type MockInvoicesTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesTemplateRepositoryMockRecorder
}

// MockInvoicesTemplateRepositoryMockRecorder is the mock recorder for MockInvoicesTemplateRepository.
type MockInvoicesTemplateRepositoryMockRecorder struct {
	mock *MockInvoicesTemplateRepository
}

// NewMockInvoicesTemplateRepository creates a new mock instance.
func NewMockInvoicesTemplateRepository(ctrl *gomock.Controller) *MockInvoicesTemplateRepository {
	mock := &MockInvoicesTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesTemplateRepository) EXPECT() *MockInvoicesTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInvoicesTemplateRepository) Create(ctx context.Context, template *entities.InvoiceTemplate) (*entities.InvoiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, template)
	ret0, _ := ret[0].(*entities.InvoiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInvoicesTemplateRepositoryMockRecorder) Create(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvoicesTemplateRepository)(nil).Create), ctx, template)
}

// Delete mocks base method.
func (m *MockInvoicesTemplateRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInvoicesTemplateRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvoicesTemplateRepository)(nil).Delete), ctx, id)
}

// MockContactsRepository is a mock of ContactsRepository interface.
type MockContactsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactsRepositoryMockRecorder
}

// MockContactsRepositoryMockRecorder is the mock recorder for MockContactsRepository.
type MockContactsRepositoryMockRecorder struct {
	mock *MockContactsRepository
}

// NewMockContactsRepository creates a new mock instance.
func NewMockContactsRepository(ctrl *gomock.Controller) *MockContactsRepository {
	mock := &MockContactsRepository{ctrl: ctrl}
	mock.recorder = &MockContactsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactsRepository) EXPECT() *MockContactsRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockContactsRepository) GetByID(ctx context.Context, id uint64) (*entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContactsRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContactsRepository)(nil).GetByID), ctx, id)
}

// MockInvoicesService is a mock of InvoicesService interface.
type MockInvoicesService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesServiceMockRecorder
}

// MockInvoicesServiceMockRecorder is the mock recorder for MockInvoicesService.
type MockInvoicesServiceMockRecorder struct {
	mock *MockInvoicesService
}

// NewMockInvoicesService creates a new mock instance.
func NewMockInvoicesService(ctrl *gomock.Controller) *MockInvoicesService {
	mock := &MockInvoicesService{ctrl: ctrl}
	mock.recorder = &MockInvoicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesService) EXPECT() *MockInvoicesServiceMockRecorder {
	return m.recorder
}

// GetScheduledInvoices mocks base method.
func (m *MockInvoicesService) GetScheduledInvoices(ctx context.Context, template entities.InvoiceTemplate) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInvoices", ctx, template)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInvoices indicates an expected call of GetScheduledInvoices.
func (mr *MockInvoicesServiceMockRecorder) GetScheduledInvoices(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInvoices", reflect.TypeOf((*MockInvoicesService)(nil).GetScheduledInvoices), ctx, template)
}

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockTransactor) Transaction(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTransactorMockRecorder) Transaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransactor)(nil).Transaction), ctx, fn)
}
