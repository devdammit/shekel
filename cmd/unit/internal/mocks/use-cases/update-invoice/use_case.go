// Code generated by MockGen. DO NOT EDIT.
// Source: internal/use-cases/update-invoice/use_case.go
//
// Generated by this command:
//
//	mockgen -source=internal/use-cases/update-invoice/use_case.go -destination=internal/mocks/use-cases/update-invoice/use_case.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/devdammit/shekel/cmd/unit/internal/entities"
	log "github.com/devdammit/shekel/pkg/log"
	gomock "go.uber.org/mock/gomock"
)

// MockPeriodsRepository is a mock of PeriodsRepository interface.
type MockPeriodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPeriodsRepositoryMockRecorder
}

// MockPeriodsRepositoryMockRecorder is the mock recorder for MockPeriodsRepository.
type MockPeriodsRepositoryMockRecorder struct {
	mock *MockPeriodsRepository
}

// NewMockPeriodsRepository creates a new mock instance.
func NewMockPeriodsRepository(ctrl *gomock.Controller) *MockPeriodsRepository {
	mock := &MockPeriodsRepository{ctrl: ctrl}
	mock.recorder = &MockPeriodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeriodsRepository) EXPECT() *MockPeriodsRepositoryMockRecorder {
	return m.recorder
}

// GetLast mocks base method.
func (m *MockPeriodsRepository) GetLast(ctx context.Context) (*entities.Period, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast", ctx)
	ret0, _ := ret[0].(*entities.Period)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockPeriodsRepositoryMockRecorder) GetLast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockPeriodsRepository)(nil).GetLast), ctx)
}

// MockInvoicesRepository is a mock of InvoicesRepository interface.
type MockInvoicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesRepositoryMockRecorder
}

// MockInvoicesRepositoryMockRecorder is the mock recorder for MockInvoicesRepository.
type MockInvoicesRepositoryMockRecorder struct {
	mock *MockInvoicesRepository
}

// NewMockInvoicesRepository creates a new mock instance.
func NewMockInvoicesRepository(ctrl *gomock.Controller) *MockInvoicesRepository {
	mock := &MockInvoicesRepository{ctrl: ctrl}
	mock.recorder = &MockInvoicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesRepository) EXPECT() *MockInvoicesRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockInvoicesRepository) GetByID(ctx context.Context, id uint64) (*entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByID), ctx, id)
}

// GetByTemplateID mocks base method.
func (m *MockInvoicesRepository) GetByTemplateID(ctx context.Context, id uint64) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTemplateID", ctx, id)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTemplateID indicates an expected call of GetByTemplateID.
func (mr *MockInvoicesRepositoryMockRecorder) GetByTemplateID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTemplateID", reflect.TypeOf((*MockInvoicesRepository)(nil).GetByTemplateID), ctx, id)
}

// MockContactsRepository is a mock of ContactsRepository interface.
type MockContactsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactsRepositoryMockRecorder
}

// MockContactsRepositoryMockRecorder is the mock recorder for MockContactsRepository.
type MockContactsRepositoryMockRecorder struct {
	mock *MockContactsRepository
}

// NewMockContactsRepository creates a new mock instance.
func NewMockContactsRepository(ctrl *gomock.Controller) *MockContactsRepository {
	mock := &MockContactsRepository{ctrl: ctrl}
	mock.recorder = &MockContactsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactsRepository) EXPECT() *MockContactsRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockContactsRepository) GetByID(ctx context.Context, id uint64) (*entities.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entities.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockContactsRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockContactsRepository)(nil).GetByID), ctx, id)
}

// MockInvoicesService is a mock of InvoicesService interface.
type MockInvoicesService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoicesServiceMockRecorder
}

// MockInvoicesServiceMockRecorder is the mock recorder for MockInvoicesService.
type MockInvoicesServiceMockRecorder struct {
	mock *MockInvoicesService
}

// NewMockInvoicesService creates a new mock instance.
func NewMockInvoicesService(ctrl *gomock.Controller) *MockInvoicesService {
	mock := &MockInvoicesService{ctrl: ctrl}
	mock.recorder = &MockInvoicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoicesService) EXPECT() *MockInvoicesServiceMockRecorder {
	return m.recorder
}

// GetScheduledInvoices mocks base method.
func (m *MockInvoicesService) GetScheduledInvoices(ctx context.Context, template entities.InvoiceTemplate) ([]entities.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledInvoices", ctx, template)
	ret0, _ := ret[0].([]entities.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledInvoices indicates an expected call of GetScheduledInvoices.
func (mr *MockInvoicesServiceMockRecorder) GetScheduledInvoices(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledInvoices", reflect.TypeOf((*MockInvoicesService)(nil).GetScheduledInvoices), ctx, template)
}

// MockCalendarService is a mock of CalendarService interface.
type MockCalendarService struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarServiceMockRecorder
}

// MockCalendarServiceMockRecorder is the mock recorder for MockCalendarService.
type MockCalendarServiceMockRecorder struct {
	mock *MockCalendarService
}

// NewMockCalendarService creates a new mock instance.
func NewMockCalendarService(ctrl *gomock.Controller) *MockCalendarService {
	mock := &MockCalendarService{ctrl: ctrl}
	mock.recorder = &MockCalendarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarService) EXPECT() *MockCalendarServiceMockRecorder {
	return m.recorder
}

// Sync mocks base method.
func (m *MockCalendarService) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockCalendarServiceMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockCalendarService)(nil).Sync), ctx)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, fields ...log.Field) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockUnitOfWork) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUnitOfWorkMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUnitOfWork)(nil).Commit), ctx)
}

// CreateInvoices mocks base method.
func (m *MockUnitOfWork) CreateInvoices(invoices []entities.Invoice, template entities.InvoiceTemplate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateInvoices", invoices, template)
}

// CreateInvoices indicates an expected call of CreateInvoices.
func (mr *MockUnitOfWorkMockRecorder) CreateInvoices(invoices, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoices", reflect.TypeOf((*MockUnitOfWork)(nil).CreateInvoices), invoices, template)
}

// DeleteInvoice mocks base method.
func (m *MockUnitOfWork) DeleteInvoice(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteInvoice", id)
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockUnitOfWorkMockRecorder) DeleteInvoice(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockUnitOfWork)(nil).DeleteInvoice), id)
}

// DeleteTemplate mocks base method.
func (m *MockUnitOfWork) DeleteTemplate(id uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTemplate", id)
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockUnitOfWorkMockRecorder) DeleteTemplate(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockUnitOfWork)(nil).DeleteTemplate), id)
}

// UpdateInvoice mocks base method.
func (m *MockUnitOfWork) UpdateInvoice(invoice entities.Invoice) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateInvoice", invoice)
}

// UpdateInvoice indicates an expected call of UpdateInvoice.
func (mr *MockUnitOfWorkMockRecorder) UpdateInvoice(invoice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockUnitOfWork)(nil).UpdateInvoice), invoice)
}
